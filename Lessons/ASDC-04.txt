4. Простые алгоритмы
	4.1. Линейный алгоритм.
	4.2. Ветвящийся алгоритм, или разветвленный.
	4.3. Циклический.
	4.4. Алгоритм Эвклида
	4.5. Ускоренный алгоритм Эвклида
	4.6. Решето Эратосфена

4. Простые алгоритмы
###########################(http://fb.ru/article/283912/vidyi-algoritmov-v-informatike-
primeryi . На основе приведенных примеров стоит разработать свои простейшие алгоритмы, во
избежание плагиатов. Также стоит подготовить блок-схемы этих алгоритмов, для лучшего
восприятия студентом.)

4.1. Линейный алгоритм.
Наиболее простым в информатике считается линейный алгоритм. Он предполагает
последовательность выполнения действий. Приведем наиболее простой пример алгоритма такого
вида. Назовем его «Сбор в школу».
1. Встаем, когда звенит будильник.
2. Умываемся.
3. Чистим зубы.
4. Делаем зарядку.
5. Одеваемся.
6. Кушаем.
7. Обуваемся и идем в школу.
8. Конец алгоритма.

4.2. Ветвящийся алгоритм, или разветвленный.
Данный вид предполагает наличие условия, при котором в случае его выполнения действия
выполняются в одном порядке, а в случае невыполнения – в другом.
Например, возьмем следующую ситуацию – переход дороги пешеходом.
1. Подходим к светофору.
2. Смотрим на сигнал светофора.
3. Он должен быть зеленым (это условие).
4. Если условие выполняется, мы переходим дорогу.
	4.1 Если нет – ждем, пока загорится зеленый.
	4.2 Переходим дорогу.
5. Конец алгоритма.

4.3. Циклический.
Данный алгоритм предполагает участок вычислений или действий, который выполняется до
выполнения определенного условия.

Возьмем простой пример. Если ряд чисел от 1 до 100. Нам
необходимо найти все простые числа, то есть те, которые делятся на единицу и себя. Назовем
алгоритм «Простые числа».
1. Берем число 1.
2. Проверяем, меньше ли оно 100.
3. Если да, проверяем простое ли это число.
4. Если условие выполняется, записываем его.
5. Берем число 2.
6. Проверяем, меньше ли оно 100.
7. Проверяем, простое ли оно. ….
	Берем число 8. Проверяем, меньше ли оно 100. Проверяем, простое ли число. Нет,
	пропускаем его.
	Берем число9. Таким образом перебираем все числа, до 100. Как видите, шаги 1 – 4
	будут повторяться некоторое число раз. Среди циклических выделяют алгоритмы с
	предусловием, когда условие проверяется в начале цикла, или с постусловием, когда
	проверка идет в конце цикла.


###########################(Из википедии - https://ru.wikipedia.org/wiki/Алгоритм_Евклида)
4.4. Алгоритм Эвклида
Алгори́тм Евкли́да — эффективный алгоритм для нахождения наибольшего общего делителя двух
целых чисел (или общей меры двух отрезков). Алгоритм назван в честь греческого математика
Евклида (III век до н. э.), который впервые описал его в VII[1] и X[2] книгах «Начал». Это
один из старейших численных алгоритмов, используемых в наше время[3].

В самом простом случае алгоритм Евклида применяется к паре положительных целых чисел и
формирует новую пару, которая состоит из меньшего числа и разницы между большим и меньшим
числом. Процесс повторяется, пока числа не станут равными. Найденное число и есть
наибольший общий делитель исходной пары. Евклид предложил алгоритм только для натуральных
чисел и геометрических величин (длин, площадей, объёмов).

Для данного алгоритма существует множество теоретических и практических применений. В
частности, он является основой для криптографического алгоритма с открытым ключом RSA[4],
широко распространённого в электронной коммерции.

###########################(Из методички 1)
(Блок-схема из методички)

#include​ ​ <stdio.h>
// Определение наибольшего общего делителя. Алгоритм Эвклида
int​ main​ (​ int​ argc​ ,​ ​ const​ ​ char​ ​ *​ argv​ [])
{
​ int​ a;
​ int​ b;
printf​ (​ "%s"​ ,​ ​ "Input a:"​ );
scanf​ (​ "%d"​ ,​ ​ &​ a​ );
printf​ (​ "%s"​ ,​ ​ "Input b:"​ );
scanf​ (​ "%d"​ ,​ ​ &​ b​ );
​ while​ ​ (​ a ​ !=​ b)
​ if​ ​ (​ a ​ >​ b)
a ​ =​ a ​ -​ b;
​ else
b ​ =​ b ​ -​ a;
printf​ (​ "GCD: %i"​ ,​ a​ );
 ​ return​ ​ 0;
}


4.5. Ускоренный алгоритм Эвклида
###########################(http://e-maxx.ru/algo/export_extended_euclid_algorithm)
В то время как "обычный" алгоритм Евклида просто находит наибольший общий делитель двух
чисел a и b, расширенный алгоритм Евклида находит помимо НОД также коэффициенты x и y
такие, что:

a*x + b*y = GCD(a, b)

Т.е. он находит коэффициенты, с помощью которых НОД двух чисел выражается через сами эти
числа.

###########################(Из методички 1)
(Блок-схема из методички)

#define​ T ​ long
T gcd​ (​ T a​ ,​ T b​ )​ {
T c;
​ while​ ​ (​ b​ )​ {
c ​ =​ a ​ %​ b;
a ​ =​ b;
b ​ =​ c;
}
​ return​ a;
}

4.6. Решето Эратосфена
###########################(Из методички 1. На самом деле определение взято исходно с
википедии - https://ru.wikipedia.org/wiki/Решето_Эратосфена .
Определение надо отформатировать, т.к. используется возведение в степень не отображаемое
в обычном текстовом файле.)
Название «решето» метод получил потому, что, согласно легенде, Эратосфен писал числа на
дощечке, покрытой воском, и прокалывал дырочки в тех местах, где были написаны составные
числа. Поэтому дощечка являлась неким подобием решета, через которое «просеивались» все
составные числа, а оставались только числа простые. Эратосфен дал таблицу простых чисел до
1000.

Алгоритм

Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена,
нужно выполнить следующие шаги:

Выписать подряд все целые числа от двух до n (2, 3, 4, …, n).
Пусть переменная p изначально равна двум — первому простому числу.
Зачеркнуть в списке числа от 2p до n считая шагами по p (это будут числа кратные p: 2p,
3p, 4p, …).
Найти первое незачёркнутое число в списке, большее чем p, и присвоить значению переменной
p это число.
Повторять шаги 3 и 4, пока возможно.
Теперь все незачёркнутые числа в списке — это все простые числа от 2 до n.

На практике, алгоритм можно улучшить следующим образом. На шаге № 3 числа можно
зачеркивать начиная сразу с числа p2, потому что все составные числа меньше него уже будут
зачеркнуты к этому времени. И, соответственно, останавливать алгоритм можно, когда p2
станет больше, чем n.[2] Также, все простые числа (кроме 2) — нечётные числа, и поэтому
для них можно считать шагами по 2p, начиная с p2.

###########################(https://vscode.ru/prog-lessons/poisk-prostyih-chisel-resheto-
eratosfena-na-si.html)

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

int main ()
{
    int n, p;
    int *mass;
    bool flag; //"зачеркивали" ли число для данного p
    printf("Input n: ");
    scanf_s("%d", &n);
    if (n >= 2)
    {
        n = n - 1; //теперь n - это количесвтво чисел в массиве
        mass = (int *)malloc(n * sizeof(int));
        for (int i = 0; i < n; i++)
            mass[i] = i + 2;
        for (int i = 0; i < n; i++)
        {
            p = mass[i];
            flag = false;
            for (int j = i + 1; j < n; j++)
            {
                if (!(mass[j] % p))
                {
                    for (int k = j; k < n - 1; k++)
                        mass[k] = mass[k+1];
                    flag = true;
                    n--; //уменьшаем, потому что чисел на одно стало меньше
                    j--; //уменьшаем, для того чтобы снова проверить на кратность j-е
число. Оно же теперь стало другим
                }
            }
            if (flag == false) break;
        }
        for (int i = 0; i < n; i++)
            printf("%d ", mass[i]);
        free(mass);
    }
    else
        printf("Error. n must be >= 2\n");

    _getch();
    return 0;
}
