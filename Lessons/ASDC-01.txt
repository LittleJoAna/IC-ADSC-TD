//1. Введение
//	1.1 Кратко о C, зачем использовать С
//	1.2 Установка среды разработки в ОС Windows
//		1.2.1 mingw + блокнот
//		1.2.2 CodeBlocks
//		1.2.3 Eclipse+mingw
//		1.2.4 QTCreator
//	1.3 Установка среды разработки в ОС Linux, например Ubuntu
//		1.3.1 gcc + блокнот
//		1.3.2 CodeBlocks + gcc
//		1.3.3 Eclipse+gcc
//		1.3.4 QTCreator
//	1.4 Установка среды разработки в ОС Mac OS
//		1.4.1 gcc + блокнот
//		1.4.2 CodeBlocks + gcc
//		1.4.3 Eclipse+gcc
//		1.4.4 QTCreator
1. Введение
Здравствуйте, коллеги! 
Я приветствую вас на Интерактивном курсе по Алгоритмам и Структурам данных на языке Си. 
В этом курсе вы познакомитесь с популярными алгоритмами, которые используют ведущие программисты всех известных компаний, например я :))) , научитесь использовать их в своей работе. Вы научитесь с помощью алгоритмов более эффективно выполнять стоящие перед вами задачи, улучшите работоспособность своих программ, скорость их выполнения, а также улучшите чистоту своего кода! Мы изучим такие простые алгоритмы, как алгоритм Евклида и решето Эратосфена, узнаем что такое рекурсия и как использовать ее в своей работе. Вы узнаете, что такое структуры данных, научитесь писать простые и сложные сортировки, познакомитесь со списками, деревьями и графами. Отдельные лекции посвящены таким интересным темам как Хеш-таблицы и криптография.
Нас ожидает очень интересный и, надеюсь, очень полезный для вас курс. 

1.1 Кратко о C, зачем использовать С
Изучать курс Алгоритмы и Структуры данных мы будем на языке Си. 
Почему же язык Си?
Этому есть ряд несомненных преимуществ языка Си перед всеми остальными языками программирования.

1. Универсальность
Язык Си можно называть отцом всех основных языков программирования: Python, Java, C#, C++, Objective-C. Синтаксис языка Си настолько близок всем программистам, что они с легкостью разберутся и в Си. 
Язык Си является маленьким языком, за счет чего его легко и быстро выучить, в нем нет принципов ООП, что намного упрощает понимание языка, а также читаемость написанных на нем программ. 
Си — это универсальный язык программирования с компактным способом записи выражений, современными механизмами управления структурами данных и богатым набором операторов. Си не является ни языком "очень высокого уровня", ни "большим" языком, не рассчитан он и на какую-то конкретную область применения. Однако благодаря широким возможностям и универсальности для решения многих задач он удобнее и эффективнее, чем предположительно более мощные языки.

2. ЭффективностьСи является эффективным языком программирования. Его конструкция продуктив­но использует возможности компьютеров, на которых он установлен. Программы на Си отличаются компактностью и быстротой исполнения. По сути дела Си обладает неко­торыми средствами точного управления, обычно характерными разве что для языка ассемблера. По желанию вы мо­жете настроить ваши программы на максимальную скорость исполнения или на более эффективное использование памяти.

3. ПереносимостьЯзык С является переносимым языком, это означает, что программу, написанную на С для одной системы, можно выполнять на другой системе всего лишь с небольши­ми изменениями, причем иногда удается вообще обходиться без изменений. В тех слу­чаях, когда изменения неизбежны, они ограничиваются простым редактированием нескольких записей в заголовочном файле, сопровождающем главную программу. Язык С является ли­дером в смысле переносимости.Компиляторы языка С (программы, преобразующие ваш код на С в инструкции, ко­торые компьютер использует для внутренних целей) доступны примерно для 40 систем, от 8-разрядных микропроцессоров до суперкомпьютеров Cray. Поскольку язык С тесно связан с Unix, операционные системы семейства Unix по­ставляются с компилятором Си в виде части соответствующих пакетов. Инсталляция операционной системы Linux в общем случае также включает компилятор языка С. Несколько компиляторов языка С предназначены для персональных компьютеров, включая различные версии систем. Таким образом, используете ли вы домашний ком­пьютер, профессиональную рабочую станцию  и мэйнфрейм, у вас высокие шансы получить компилятор языка С для вашей конкретной системы.

4. Мощь и гибкостьС - это мощный и гибкий язык программирования (два наиболее предпочитаемых определения в литературе компьютерной тематики). Например, большая часть про­граммных кодов мощной гибкой операционной системы Unix написана на С. Многие компиляторы и интерпретаторы других языков, таких как FORTRAN, Perl, Python, Pascal, LISP, Logo и BASIC, были реализованы на С. В результате, когда вы используете FORTRAN на Uniх-машине, то в конечном итоге программа, написанная на С, выпол­няет работу по созданию окончательной исполняемой программы. Программы на С применялись для решения физических и технических задач, и даже для анимации специальных эффектов для множества фильмов, в числе которых "Gladiator" ("Гла­диатор" ) .

5. Ориентация на программистовЯзык С ориентирован на удовлетворение потребностей программистов. Он пре­доставляет вам доступ к оборудованию и позволяет манипулировать отдельными раз­рядами памяти. Он также предоставляет богатый выбор операций, которые позволя­ют вам кратко формулировать ваши задачи. Язык С обладает меньшей строгостью, чем, скажем, Pascal, в  плане ограничения того, что вы сможете сделать. Такая гиб­кость является достоинством и одновременно означает опасность. Достоинство за­ключается в том, что решение многих задач, таких как преобразование форматов данных, в С намного проще, чем в других языках. Опасность состоит в том, что вы можете допускать такие ошибки, которые просто невозможны в других языках. Язык С предоставляет вам большую свободу действий, но при этом накладывает и большую ответственность.Наряду с этим, большинство реализаций языка С сопровождаются обширными библиотеками полезных функций на С. Эти функции способны удовлетворить многие из потребностей, с которыми сталкивается программист.

Си - язык сравнительно "низкого уровня". Однако это вовсе не умаляет его достоинств, просто Си имеет дело с теми же объектами, что и большинство компьютеров, т. е. с символами, числами и адресами. С ними, можно оперировать при помощи арифметических и логических операций, выполняемых реальными машинами.В Си нет прямых операций над составными объектами, такими как строки символов, множества, списки и массивы. В нем нет операций, которые бы манипулировали с целыми массивами или строками символов, хотя структуры разрешается копировать целиком как единые объекты. В языке нет каких-либо средств распределения памяти, помимо возможности определения статических переменных и стекового механизма при выделении места для локальных переменных внутри функций. Нет в нем "кучи" и "сборщика мусора". Наконец, в самом Си нет средств ввода-вы- вода, инструкций READ (читать) и WRITE (писать) и каких-либо методов доступа к файлам. Все это - механизмы высокого уровня, которые в Си обеспечиваются исключительно с помощью явно вызываемых функций. Большинство реализованных Си-систем содержат в себе разумный стандартный набор этих функций.
Отсутствие некоторых из перечисленных средств может показаться серьезным недостатком ("выходит, чтобы сравнить две строки символов, нужно обращаться к функции?"). Однако компактность языка имеет реальные выгоды. Поскольку Си относительно мал, то и описание его кратко, и овладеть им можно быстро. Программист может реально рассчитывать на то, что он будет знать, понимать и на практике регулярно пользоваться всеми возможностями языка.

Подводя итог, можно отметить следующие тезисы:
Си не отвлекает нас от изучения алгоритмов своими конструкциями языка.
Синтаксис Си знаком всем программистам, изучающих хоть какой нибудь из существующих языков.
Программы на Си легкочитаемы, отличаются быстродействием.
Изучая алгоритмы на Си, любой программист станет на шаг ближе к пониманию работы его компьютера.


// Последовательности установки
1.2 Установка среды разработки в ОС Windows
1.2.1 mingw + блокнот

	- блокнот уже в системе

	- скачать(прямая ссылка на скачивание) https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download

	- установить mingw-w64(при установке оставить значения по
	-умолчанию https://yadi.sk/i/7KPeDj7ybX1uiQ). Путь установки по-умолчанию - C:\Program Files (x86)\mingw-w64\i686-8.1.0-posix-dwarf-rt_v6-rev0

	- после установки нужно добавить в переменную PATH путь к директории где находится компилятор, а именно - C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/bin . Делается это следующим образом -
		а. нажать сочетание клавиш - Win+Pause
		б. в открывшемся окне - слева выбрать "Дополнительные параметры системы"
		в. в открывшемся окне - внизу выбрать "Переменные среды"
		г. в открывшемся окне - в нижнем окне найти переменную Path и ниже нажать кнопку "Изменить" - https://yadi.sk/i/EctNa6cM9c7HyQ
		д. в открывшемся окне перейти в самый конец поля "Значение переменной". В конце добавить точку с запятой и ввести путь к компилятору. Нажать "ОК" во всех открытых окнах. https://yadi.sk/i/e0a57HrR01oUdQ
		е. проверить "видит" ли Windows компилятор. Открыть консоль "cmd.exe". Ввести gcc -v. Вывод должен выглядеть приблизительно так - https://yadi.sk/i/ouu5YsvjQI5lvQ

	- открыть блокнот
	- ввести следующий код
		#include <stdio.h>

        int main()
        {
          printf("Hello world\n");
          return 0;
        }
	- сохранить файл как "hello.c"
	- открыть консоль - cmd.exe
	- перейти в папку с сохранённым "hello.c" командой -
		cd C:\Users\<ваше_имя_пользователя>\
	- скомпилировать командой - gcc hello.c -o hello
	- запустить hello.exe
	- должен быть получен вывод - Hello world - https://yadi.sk/i/bZDDnXMPyp_Ung

	ВОЗМОЖНЫЕ ПРОБЛЕМЫ ПРИ ЗАПУСКЕ:
	- если при запуске выводится сообщение "Отказано в доступе", то для директории в которой запускается программа нужно дать разрешение на запуск программ. Ссылка на решение - https://sonikelf.ru/otkazano-v-dostupe-k-papke/

1.2.2 CodeBlocks(самая простая установка)
	- скачать версию с встроенным mingw(прямая ссылка на скачивание) - http://sourceforge.net/projects/codeblocks/files/Binaries/17.12/Windows/codeblocks-17.12mingw-setup.exe

	- запустить codeblocks-17.12mingw-setup.exe. Провести установку с настройками по-умолчанию.

	- После заершения установки будет предложено запустить CodeBlocks. Можно согласиться, или отказаться, закрыть окно установщика и запустить CodeBlocks потом.

	- в открывшемся окне выбрать "Create a new project" - https://yadi.sk/i/kDX7fq3pVoH6HA .
	Далее в списке выбрать "Console application" и нажать справа вверху "Go" - https://yadi.sk/i/qvzOahZtiTfiRw .

   - "Next" -> выбираем C(https://yadi.sk/i/aXveQ2OBmGeo-A) -> "Next" -> выбираем имя проекта(https://yadi.sk/i/1eGeMtpAM0VpgQ) -> "Next" -> оставляем всё по-умолчанию -> "Finish".

   - в открывшемся дереве проекта слева открываем "Sources", далее два раза жмём на "main.c". Откроется готовый код проекта с "Hello world".

   - нажимаем "Build". Внизу должно быть сообщение о компиляции проекта. Что-то похожее на это https://yadi.sk/i/_rFYRhCkBCTl_Q .

   - нажимаем "Run". Откроется окно с результатом работы программы https://yadi.sk/i/QyAraIiXUGOLqQ

1.2.3 Eclipse+mingw
	- установка mingw:
		- скачать(прямая ссылка на скачивание) https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download

		- установить mingw-w64(при установке оставить значения по
		-умолчанию https://yadi.sk/i/7KPeDj7ybX1uiQ). Путь установки по-умолчанию - C:\Program Files (x86)\mingw-w64\i686-8.1.0-posix-dwarf-rt_v6-rev0

		- после установки нужно добавить в переменную PATH путь к директории где находится компилятор, а именно - C:/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/bin . Делается это следующим образом -
			а. нажать сочетание клавиш - Win+Pause
			б. в открывшемся окне - слева выбрать "Дополнительные параметры системы"
			в. в открывшемся окне - внизу выбрать "Переменные среды"
			г. в открывшемся окне - в нижнем окне найти переменную Path и ниже нажать кнопку "Изменить" - https://yadi.sk/i/EctNa6cM9c7HyQ
			д. в открывшемся окне перейти в самый конец поля "Значение переменной". В конце добавить точку с запятой и ввести путь к компилятору. Нажать "ОК" во всех открытых окнах. https://yadi.sk/i/e0a57HrR01oUdQ
			е. проверить "видит" ли Windows компилятор. Открыть консоль "cmd.exe". Ввести gcc -v. Вывод должен выглядеть приблизительно так - https://yadi.sk/i/ouu5YsvjQI5lvQ

	- установка Eclipse
		- скачать инсталятор. Перейти по-ссылке - https://www.eclipse.org/downloads/download.php?file=/oomph/epp/photon/R/eclipse-inst-win64.exe . Нажать "Download"

		- запустить eclipse-inst-win64.exe . В открывшемся окне(https://yadi.sk/i/jzFHLo2U8uahiw) выбрать
		установку "Eclipse IDE for C/C++ Developers"

		- в открывшемся окне нажать "Install"(https://yadi.sk/i/odn-gxoV07V-ag). Дождаться оконачния  установки и нажать "Launch".

		- при старте будет предложено выбрать "workspace" - директорию в которой будут храниться ваши проекты. Пока можно оставить без изменений, нажать "Launch"

		- в открывшемся окне выбираем "File" -> "New" -> "Other". В открывшемся окне открываем список "C/C++", далее выбираем "C Project". "Next" -> вводим имя проекта, выбираем из списка готовых проектов "Hello World ANSI C Project", справа выбираем компилятор "MinGW GCC" -> "Finish".

		- откроется окно с готовым файлом проекта "Hello World". Нажать "Build"(https://yadi.sk/i/yTryStXjHEGB7A), результат компиляции внизу в консоли - https://yadi.sk/i/WIICDbEbOBMGBw .
		Нажать "Run"(https://yadi.sk/i/Wed9xgpurTDWQQ). Внизу в консоли будет выведен результат работы "!!!Hello World!!!"(https://yadi.sk/i/tVuWGwLswBdT7A).

1.2.4 QTCreator(вариант простой, но объёмный)
	- скачать - https://www.qt.io/download-thank-you?hsLang=en (19МБ)

	- запустить -> "Next" -> "Skip" -> "Далее" -> "Далее"(каталог установки по-умолчанию) -> список состоит из двух частей - "Preview" и "Qt". "Preview" это беты, альфы будущих продуктов(для тех кому не терпится). "Qt" то что нужно, выбираем верхнюю версию "5.11.1", потом "MinGW 5.3.0 32 bit"(будет установлен инструментарий только для работы с C). -> "Далее" -> Лицензия, принять "Далее" -> Ярлыки меню Пуск "Далее" -> "Установить". Скачивание длиться минут 10, при скорости 20Мбит, и ещё минут 5 установка. -> "Далее" -> Запускаем с использованием галки "Launch Qt Creator" или после завершение установки -> "Завершить".

	- в открывшемся окне - "Файл" -> "Создать файл или проект..." -> выбрать "Проект без Qt" https://yadi.sk/i/uFnAwabsilZUdA -> "Приложение на языке C" -> "Выбрать..." -> назвать проект, выбрать директорию размещения(можно оставить по-умолчанию) -> система сборки "qmake" -> "Далее" -> по-умолчанию выбран единственный пункт "Desktop Qt 5.11.1 MinGW 32bit"(https://yadi.sk/i/yPtdxUNSeBqa1g) -> "Завершить"

    - нажать "Собрать проект <имя_проекта>"(https://yadi.sk/i/A77wV8wAuH946A). Результат сборки можно увидеть нажав внизу на вкладку "Консоль сборки"(https://yadi.sk/i/UGjKSRwTFg-tGg).

    - запустить проект "Запустить"(https://yadi.sk/i/aiju2nSOELGO9w). Результат можно посмотреть в открывшемся окне - https://yadi.sk/i/VFGBvE1SEvs_uQ .

1.3 Установка среды разработки в ОС Linux, например Ubuntu
1.3.1 gcc + блокнот
	- открыть окно терминала, установить gcc командой - sudo apt install build-essential

	- проверить установку командой - gcc -v, будет выведено приблизительно следующее - https://yadi.sk/i/vKof0ORk78k85g

	- открыть любой текстовый редактор, например "gedit". Ввести в нём
	#include <stdio.h>

    int main()
    {
      printf("Hello world\n");
      return 0;
    }

    сохранить как "hello.c"

    - в окне терминала перейти в директорию в которой сохранён файл "hello.c", например
    cd /home/<ваше_имя_пользователя>/

    - скомпилировать код командой gcc hello.c -o hello

	- запустить программу командой - ./hello

1.3.2 CodeBlocks + gcc
	- открыть окно терминала, установить gcc командой - sudo apt install build-essential

	- проверить установку командой - gcc -v, будет выведено приблизительно следующее - https://yadi.sk/i/vKof0ORk78k85g

	- в окне терминала ввести команду для установки CodeBlocks - sudo apt install codeblocks

	- запустить CodeBlocks. При старте появится окно содержащее список доступных и
	найденных в системе компиляторов - https://yadi.sk/i/xB5K8qkfyUeCag . По-умолчанию должен быть
	выбран "GNU GCC Compiler", об этом будет сообщение под окном списка компиляторов -
	"Current defaule compiler: GNU GCC Compiler"

	- в открывшемся окне выбрать "Create a new project" - https://yadi.sk/i/c9Ux-aYKGJD0fA .
	Далее в списке выбрать "Console application" и нажать справа вверху "Go" -
	https://yadi.sk/i/KpvO-tuqw-F8Uw .

	- "Next" -> выбираем C(https://yadi.sk/i/o4HW0Ih00lV7-g) -> "Next" -> выбираем имя
	проекта и директорию для сохранения. В пути не должно быть
	русских букв, иначе проект не соберётся(https://yadi.sk/i/ksot5zGgocT5fw) -> "Next" ->
	оставляем всё по-умолчанию(https://yadi.sk/i/bWieWlk7l_Pd4w) -> "Finish".

	- в открывшемся дереве проекта слева открываем "Sources", далее два раза жмём на
	"main.c". Откроется готовый код проекта с "Hello world".

	- нажимаем "Build"(https://yadi.sk/i/jRFVHiWHTsFBrg). Внизу должно быть сообщение о компиляции
	проекта. Что-то похожее	на это - https://yadi.sk/i/W8ppy1X-rSG5WQ.

	- нажимаем "Run"(https://yadi.sk/i/P9GpWNwLV7AmCQ). Откроется окно с результатом работы
	программы - https://yadi.sk/i/XtiXmWKWKETvNA

1.3.3 Eclipse+gcc
	- открыть окно терминала, установить gcc командой - sudo apt install build-essential

	- проверить установку командой - gcc -v, будет выведено приблизительно следующее -
	https://yadi.sk/i/vKof0ORk78k85g

	- скачать инсталятор. Перейти по-ссылке -
	https://www.eclipse.org/downloads/download.php?file=/oomph/epp/photon/R/eclipse-inst-
	linux64.tar.gz . Нажать "Download"

	- распаковать eclipse-inst-linux64.tar.gz. Зайти в
	eclipse-inst-linux64/eclipse-installer. Запустить eclipse-inst . В открывшемся
	окне(https://yadi.sk/i/TVRK7Wi3Hbp1XA) выбрать установку "Eclipse IDE for C/C++
	Developers"

	- в открывшемся окне нажать "Install"(https://yadi.sk/i/WFuKDgBMThMAoA). Дождаться
	оконачния установки и нажать "Launch".

	- при старте будет предложено выбрать "workspace" - директорию в которой будут
	храниться ваши проекты. Пока можно оставить без изменений, нажать "Launch"

	- в открывшемся окне выбираем "File" -> "New" -> "Other". В открывшемся окне
	открываем список "C/C++", далее выбираем "C Project". "Next" -> вводим имя проекта,
	выбираем из списка готовых проектов "Hello World ANSI C Project", справа выбираем
	компилятор "Linux GCC" -> "Finish"(https://yadi.sk/i/F33upQsxeu9f3w).

	- откроется окно с готовым файлом проекта "Hello World"(если будет открыта вкладка
	приветствия, то просто закрыть её - https://yadi.sk/i/iFRado_JI43ywQ). Нажать
	"Build"(https://yadi.sk/i/b3WdwM_qg1XADQ), результат компиляции
	внизу в консоли - https://yadi.sk/i/_hqWHhKUOn23Qg .

	- нажать на стрелку рядом с "Run"(https://yadi.sk/i/nbVgVGAfJpH2wA). Выбрать "Run
	Configurations...". В открывшемся окне выбрать "C/C++ Application", вверху слева
	нажать на кнопку "New Launch Configuration" - https://yadi.sk/i/YtnZPnZmlwzxnA .
	После появления новой конфигурации "hello Debug" справа внизу нажать "Run" -
	https://yadi.sk/i/urs0wP6k3wbMKQ .
	Внизу в консоли будет выведен результат работы "!!!Hello
	World!!!"(https://yadi.sk/i/RwdIjYCkcLfHyg).

1.3.4 QTCreator
	- открыть окно терминала, установить gcc командой - sudo apt install build-essential

	- проверить установку командой - gcc -v, будет выведено приблизительно следующее -
	https://yadi.sk/i/vKof0ORk78k85g

	- скачать - https://www.qt.io/download-thank-you?hsLang=en (32МБ)

	- открыть свойства файла и установить галку "Разррешить выполнение файла как
	программы".

	- запустить "qt-unified-linux-x64-3.0.5-online.run" -> "Next" -> "Skip" -> "Далее"
	-> "Далее"(каталог установки по-умолчанию) -> список состоит из двух частей -
	"Preview" и "Qt". "Preview" это беты, альфы будущих продуктов(для тех кому не
	терпится). "Qt" то что нужно, выбираем верхнюю версию "5.11.1", потом
	"Desktop gcc 64-bit"(будет установлен инструментарий только для работы с C). ->
	"Далее" -> Лицензия, принять "Далее" -> "Установить". Скачивание длиться минут 17,
	при скорости 20Мбит, и ещё несколько минут установка. -> "Далее" -> Запускаем с
	использованием галки "Launch Qt Creator" или после завершение установки ->
	"Завершить".

	- в открывшемся окне - "Файл" -> "Создать файл или проект..." -> выбрать "Проект без
	Qt" https://yadi.sk/i/zN7cf9o5RNkiuw -> "Приложение на языке C" -> "Выбрать..." ->
	назвать	проект, выбрать директорию размещения(можно оставить по-умолчанию) -> система
	сборки "qmake" -> "Далее" -> по-умолчанию выбран единственный пункт "Desktop Qt 5.11.1
	GCC	64bit"(https://yadi.sk/i/GYHBfSQeoMdJ4A) -> "Далее" -> "Завершить"

    - нажать "Собрать проект <имя_проекта>"(https://yadi.sk/i/SuenMLgqyCB05Q). Результат
	сборки можно увидеть нажав внизу на вкладку "Консоль сборки"(https://yadi.sk/i/JfANUaealbeBIQ).

    - запустить проект "Запустить"(https://yadi.sk/i/HKL1mM7HaQSC2w). Результат можно посмотреть в
	открывшемся окне - https://yadi.sk/i/ng7kEQudq3GBow .

1.4 Установка среды разработки в ОС Mac OS
1.4.1 gcc + блокнот
	- установить Xcode(через AppStore)

	- установить Xcode Command Line Tools командой - xcode-select --install . Далее
	следовать инструкциям инсталятора.

	- проверить наличие компилятора в окне терминала командой - gcc -v , должно
	получиться что-то вроде этого - https://yadi.sk/i/FIQSRFxVv49WZQ

	- создать в любой домашней директории(например Documents) файл "hello.c" командой, в
	терминале - touch hello.c (потому как маковский "TextEdit" не умеет делать текстовые
	файлы с произвольным расширением, а для того чтобы иметь такую возможность нужно
	устанавливать отдельную утилиту iMakerTxtFile)

	- но и это ещё не всё. Для того чтобы ввести код "Hello World" пришлось устанавливать
	систему "MacPorts", чтобы установить "Midnight Commander", т.к. встроенный текстовый
	редактор "TextEdit" не только не умеет сохранять файлы с произвольным расширением,
	но ещё и сохраняет текст с модифицированными кавычками, которые не распознаются
	компилятором и в результате выводятся ошибки - https://yadi.sk/i/97N6ICvuS3hWhA . Вот
	что стояло вместо кавычек, при просмотре через "Midnight Commander" -
	https://yadi.sk/i/QBqV5XHmD2b6kg

	- сайт macports.org, в разделе Downloads скачать нужный установочный пакет под
	текущую версию ОС - https://yadi.sk/i/QBqV5XHmD2b6kg

	- обновить коллекцию портов командой - sudo port -v selfupdate

	- установить "Midnight Commander" командой - sudo port install mc

	- открыть созданный "hello.c" текстовым редактором, например текстовым редактором
	"Midnight Commander". Ввести в нём
	#include <stdio.h>

    int main()
    {
      printf("Hello world\n");
      return 0;
    }

    сохранить.

    - в окне терминала перейти в директорию в которой сохранён файл "hello.c", например
    cd Documents

    - скомпилировать код командой gcc hello.c -o hello

	- запустить программу командой - ./hello

	- результат - https://yadi.sk/i/FApJqiwjwN7fag

1.4.2 CodeBlocks + gcc
	- установить Xcode(через AppStore)

	- установить Xcode Command Line Tools командой - xcode-select --install . Далее
	следовать инструкциям инсталятора. Не знаю насколько это нужно в этом варианте, но
	пусть будет.

	- проверить наличие компилятора в окне терминала командой - gcc -v , должно
	получиться что-то вроде этого - https://yadi.sk/i/FIQSRFxVv49WZQ

	- скачать CodeBlocks тут - http://www.codeblocks.org/downloads/26 -
	https://yadi.sk/i/Mvm7QRMPrOpjUA

	- запустить CodeBlocks-13.12-mac.zip. При старте появится окно содержащее список
	доступных и найденных в системе компиляторов - https://yadi.sk/i/CQ88OZO4nJd62w .
	По-умолчанию должен быть выбран "GNU GCC Compiler", об этом будет сообщение под
	окном списка компиляторов - "Current defaule compiler: GNU GCC Compiler". Провести
	установку с настройками по-умолчанию.

	- в открывшемся окне выбрать "Create a new project" -
	https://yadi.sk/i/9p3NU0OFXIsdSA.
	Далее в списке выбрать "Console application" и нажать справа вверху "Go" -
	https://yadi.sk/i/kLJ_-IcR6FijqA .

   - "Next" -> выбираем C(https://yadi.sk/i/fF0VV1NtRpvVMg) -> "Next" -> выбираем имя
	проекта и папку сохранения(https://yadi.sk/i/o0TwQGsImldJuQ) -> "Next" -> оставляем
	всё по-умолчанию(https://yadi.sk/i/Qf_Z83jcILrTaQ) -> "Finish".

   - в открывшемся дереве проекта слева открываем "Sources", далее два раза жмём на
	"main.c". Откроется готовый код проекта с "Hello world".

   - нажимаем "Build"(https://yadi.sk/i/k923ka99XvJJhA). Внизу должно быть сообщение о
	компиляции проекта. Что-то похожее на это https://yadi.sk/i/IVrC6nFyXFbZUg .

   - нажимаем "Run"(https://yadi.sk/i/J03FIRV99mbQjA). Откроется окно с результатом работы
	программы - https://yadi.sk/i/ndlFZJ21tzsOJQ

1.4.3 Eclipse+gcc
	Eclipse вылетает. По-всей видимости проблема связана с версией системы 10.9.5.
	На сайте Eclipse в багтреккере данная проблема описана -
	https://bugs.eclipse.org/bugs/show_bug.cgi?id=537027 .
	Возможно в новой версии MacOS установка пройдёт без проблем.

1.4.4 QTCreator
	https://yadi.sk/i/PZ9Qq7FiWQ2Blw
